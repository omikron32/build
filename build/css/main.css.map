{"version":3,"sources":["components/_fonts.scss","components/_index.scss","helpers/common/_functions.scss"],"names":[],"mappings":"iBAaA,WACE,YAAA,WACA,YAAA,IACA,WAAA,OACA,IAAA,wCAAA,gBACA,aAAA,KAGF,WACE,YAAA,WACA,YAAA,IACA,WAAA,OACA,IAAA,0CAAA,gBACA,aAAA,KAGF,WACE,YAAA,WACA,YAAA,IACA,WAAA,OACA,IAAA,2CAAA,gBACA,aAAA,KClCF,KACE,OAAA,EACA,QAAA,EC6bA,YAAA,UAAA,CAAA,KAAA,CAAA,eAAA,CAAA,WD3bA,YAAA,IAGF,QACE,SAAA,MACA,MAAA,KACA,iBAAA,uBACA,QAAA,SAAA,EAGF,gBACE,QAAA,YAAA,QAAA,YAAA,QAAA,KACA,iBAAA,QAAA,cAAA,QAAA,gBAAA,cACA,kBAAA,OAAA,eAAA,OAAA,YAAA,OAEA,sBACE,MAAA,KACA,UAAA,KACA,YAAA,IAIJ,WACE,UAAA,OACA,QAAA,EAAA,KACA,OAAA,EAAA,KAGF,MACE,QAAA,YAAA,QAAA,YAAA,QAAA,KACA,gBAAA,KAKA,YACE,MAAA,KACA,eAAA,UACA,QAAA,EAAA,SACA,gBAAA,KAEA,kBACE,MAAA,QAKN,cACE,YAAA,MACA,eAAA,MACA,WAAA,4BAEA,qBACE,UAAA,KACA,eAAA,UAGF,sBACE,MAAA,QAKF,yBACE,gBAAA,KAIJ,eACE,WAAA,QAAA,oBACA,YAAA,MAEA,sBACE,WAAA,OACA,eAAA,UACA,MAAA,KACA,UAAA,KAGF,qBACE,QAAA,MACA,WAAA,OACA,MAAA,KAIJ,qBACE,QAAA,YAAA,QAAA,YAAA,QAAA,KACA,gBAAA,KACA,iBAAA,QAAA,cAAA,QAAA,gBAAA,cACA,QAAA,EAGF,oBACE,QAAA,YAAA,QAAA,YAAA,QAAA,KACA,mBAAA,SAAA,sBAAA,OAAA,mBAAA,OAAA,eAAA,OACA,iBAAA,OAAA,cAAA,OAAA,gBAAA,OACA,kBAAA,OAAA,eAAA,OAAA,YAAA,OAEA,0BACE,mBAAA,WAAA,WAAA,WACA,MAAA,OACA,OAAA,MACA,iBAAA,QACA,OAAA,IAAA,QAAA,MACA,cAAA,IACA,cAAA,KACA,SAAA,SAEA,iCACE,QAAA,GACA,iBAAA,QACA,MAAA,IACA,OAAA,IACA,cAAA,IACA,SAAA,SACA,MAAA,MACA,IAAA,IACA,kBAAA,iBAAA,cAAA,iBAAA,UAAA,iBACA,mBAAA,KAAA,EAAA,EAAA,OAAA,CAAA,KAAA,EAAA,EAAA,OAAA,CAAA,KAAA,EAAA,EAAA,OAAA,CAAA,MAAA,EAAA,EAAA,QAAA,WAAA,KAAA,EAAA,EAAA,OAAA,CAAA,KAAA,EAAA,EAAA,OAAA,CAAA,KAAA,EAAA,EAAA,OAAA,CAAA,MAAA,EAAA,EAAA,QAIJ,0BACE,MAAA","file":"main.css","sourcesContent":["////@include addFont('Montserrat', 'BlackItalic', 900, 'italic');\r\n////@include addFont('Montserrat', 'ExtraBoldItalic', 800 'italic');\r\n////@include addFont('Montserrat', 'BoldItalic', 700 'italic');\r\n////@include addFont('Montserrat', 'SemiBoldItalic', 600 'italic');\r\n////@include addFont('Montserrat', 'MediumItalic', 500 'italic');\r\n////@include addFont('Montserrat', 'Italic', 400, 'italic');\r\n//@include addFont('Montserrat', 'Black', 900,);\r\n//@include addFont('Montserrat', 'ExtraBold', 800);\r\n//@include addFont('Montserrat', 'Bold', 700);\r\n//@include addFont('Montserrat', 'SemiBold', 600);\r\n//@include addFont('Montserrat', 'Medium', 500);\r\n//@include addFont('Montserrat', 'Regular', 400);\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  font-weight: 300;\r\n  font-style: normal;\r\n  src: url('../../fonts/Montserrat-Light.woff2') format('woff2');\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  font-weight: 400;\r\n  font-style: normal;\r\n  src: url('../../fonts/Montserrat-Regular.woff2') format('woff2');\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  src: url('../../fonts/Montserrat-SemiBold.woff2') format('woff2');\r\n  font-display: swap;\r\n}\r\n","body {\n  margin: 0;\n  padding: 0;\n  @include fontFamily('Montserrat');\n  font-weight: 400;\n}\n\n.header {\n  position: fixed;\n  width: 100%;\n  background-color: hsla(240, 29%, 9%, 0.9);\n  padding: em(25 0, $fz);\n}\n\n.header-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  &__logo {\n    color: #fff;\n    font-size: 28px;\n    font-weight: bold;\n  }\n}\n\n.container {\n  max-width: 1230px;\n  padding: 0 15px;\n  margin: 0 auto;\n}\n\n.menu {\n  display: flex;\n  list-style-type: none;\n\n  &__item {\n  }\n\n  &__link {\n    color: #fff;\n    text-transform: uppercase;\n    padding: em(0 25, $fz);\n    text-decoration: none;\n\n    &:hover {\n      color: #43abf0;\n    }\n  }\n}\n\n.head-section {\n  padding-top: 250px;\n  padding-bottom: 250px;\n  background: url('../img/top-section.jpg');\n\n  &__title {\n    font-size: 48px;\n    text-transform: uppercase;\n  }\n\n  &__accent {\n    color: #3e9cdc;\n  }\n}\n\n.head-section-list {\n  &__item {\n    list-style-type: \"- \";\n  }\n}\n\n.order-section {\n  background: #272733 url('../img/map.png');\n  padding-top: 100px;\n\n  &__title {\n    text-align: center;\n    text-transform: uppercase;\n    color: #fff;\n    font-size: 36px;\n  }\n\n  &__text {\n    display: block;\n    text-align: center;\n    color: #fff;\n  }\n}\n\n.order-section-steps {\n  display: flex;\n  list-style-type: none;\n  justify-content: space-between;\n  padding: 0;\n}\n\n.order-section-step {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  &__item {\n    box-sizing: border-box;\n    width: em(100, $fz);\n    height: 100px;\n    background-color: #3e9cdc;\n    border: 5px #286690 solid;\n    border-radius: 50%;\n    margin-bottom: 20px;\n    position: relative;\n\n    &::after {\n      content: '';\n      background-color: #c4c4c4;\n      width: 6px;\n      height: 6px;\n      border-radius: 50%;\n      position: absolute;\n      right: -17px;\n      top: 50%;\n      transform: translateY(-50%);\n      box-shadow: 26px 0 0 #c4c4c4, 52px 0 0 #c4c4c4, 78px 0 0 #c4c4c4, 104px 0 0 #c4c4c4;\n    }\n  }\n\n  &__text {\n    color: #fff;\n  }\n}","/*\r\n * Функция возвращающая null вместо error если значение в списке не найдено\r\n * @param {List} $list - список\r\n * @param {Number}$index - индекс эелемента\r\n */\r\n@function nth-value($list, $index) {\r\n  @return if(length($list) >= $index, nth($list, $index), null);\r\n}\r\n\r\n/*\r\n * Функция возвращающая z-index елемента\r\n * @requiered  $z-layers список слоев;\r\n * @param {List, Map} $z-layers - массив со именами и значениями z-index;\r\n * @param {String} $name - елемент;\r\n * https://codepen.io/jakob-e/pen/KpdBzY\r\n */\r\n@function z-index($name) {\r\n  $z: null;\r\n  @if type-of($z-layers) == map {\r\n    $z: map-get($z-layers, $name);\r\n  }\r\n  @if type-of($z-layers) == list {\r\n    @for $i from 1 through length($z-layers) {\r\n      @if nth($z-layers, $i) == $name {\r\n        $z: $i;\r\n      }\r\n    }\r\n  }\r\n  @if $z {\r\n    @return $z;\r\n  } @else {\r\n    @error ('Could not find a z-index for `#{$name}`');\r\n  }\r\n}\r\n\r\n/*\r\n  Более короткая версия функции z-index;\r\n  @param {String, List}\r\n  @return {Number}\r\n */\r\n@function z($arglist...) {\r\n  @return z-index($arglist...);\r\n}\r\n\r\n/*\r\n  Функция обрезающая единицы измерения и возвращающая число\r\n  @param {Number}\r\n  @return {Number}\r\n */\r\n@function strip-units($number) {\r\n  @return calc($number / ($number * 0 + 1));\r\n}\r\n\r\n/*Функция замены чего-либо в строке\r\n  @author Hugo Giraudel\r\n  @param {String} $string - строка в которой ищем\r\n  @param {String} $search - то что нужно заменить\r\n  @param {String} $replace ('') - то на что нужно заменить\r\n  @return {String} - обновленная строка\r\n*/\r\n@function str-replace($string, $search, $replace: '') {\r\n  $index: str-index($string, $search);\r\n\r\n  @if $index {\r\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n  }\r\n\r\n  @return $string;\r\n}\r\n\r\n@function to-bool($value) {\r\n  @if ($value == '' or $value == 0 or $value == ()) {\r\n    @return false\r\n  } @else {\r\n    @return true\r\n  }\r\n}\r\n\r\n/*\r\n  Функция возвращающая значение в em\r\n  **ВСЕГДА ДОЛЖНО БЫТЬ КАК МИНИМУМ 2 ВХОДНЫХ ПАРАМЕТРА**\r\n  - сколько угодно значений может быть передано в функцию\r\n  - последний параметр всегда указывает в каком контексте надо считать em'ы\r\n  @list, @Number $values - значения\r\n  @return EM\r\n\r\n  Примеры :\r\n    font-size: em($h1-font-size, 16);\r\n    font-size: em($h1-font-size, $context); Указание контекста(шрифта родителя)\r\n    border-bottom: em(1px solid black) => .0625em solid black) ;\r\n    box-shadow: em(0 0 2px #ccc, inset 0 0 5px #eee, $h1-font-size) => 0 0 .125em #ccc, inset 0 0 .3125em #eee; // Множественные значения\r\n\r\n  source: https://github.com/pierreburel/sass-em;\r\n */\r\n\r\n@function em($values...) {\r\n  $context: strip-units(nth($values, length($values)));\r\n  $result: ();\r\n  $separator: list_separator($values);\r\n\r\n  @for $i from 1 through length($values) - 1 {\r\n    $value: nth($values, $i);\r\n    @if type-of($value) == 'number' {\r\n      $value: strip-units($value);\r\n      $result: append($result, calc($value / $context * 1em), $separator);\r\n    } @else if type-of($value) == 'list' {\r\n      $result: append($result, em(append($value, $context)...), $separator);\r\n    } @else {\r\n      $result: append($result, $value, $separator);\r\n    }\r\n  }\r\n\r\n  @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function vw($values...) {\r\n  $size: strip-units(nth($values, length($values)));\r\n  $result: ();\r\n  $separator: list_separator($values);\r\n\r\n  @for $i from 1 through length($values) - 1 {\r\n    $value: nth($values, $i);\r\n    @if type-of($value) == 'number' {\r\n      $value: strip-units($value);\r\n      $result: append($result, $value / $size * 100vw, $separator);\r\n    } @else if type-of($value) == 'list' {\r\n      $result: append($result, vw(append($value, $size)...), $separator);\r\n    } @else {\r\n      $result: append($result, $value, $separator);\r\n    }\r\n  }\r\n\r\n  @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function vh($values...) {\r\n  $size: strip-units(nth($values, length($values)));\r\n  $result: ();\r\n  $separator: list_separator($values);\r\n\r\n  @for $i from 1 through length($values) - 1 {\r\n    $value: nth($values, $i);\r\n    @if type-of($value) == 'number' {\r\n      $value: strip-units($value);\r\n      $result: append($result, $value / $size * 100vh, $separator);\r\n    } @else if type-of($value) == 'list' {\r\n      $result: append($result, vh(append($value, $size)...), $separator);\r\n    } @else {\r\n      $result: append($result, $value, $separator);\r\n    }\r\n  }\r\n\r\n  @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function gcd($a, $b) {\r\n  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\r\n  @if ($b != 0) {\r\n    @return gcd($b, $a % $b);\r\n  } @else {\r\n    @return abs($a);\r\n  }\r\n}\r\n\r\n@function nth-root($num, $n: 2, $prec: 12) {\r\n  // From: http://rosettacode.org/wiki/Nth_root#JavaScript\r\n  $x: 1;\r\n\r\n  @for $i from 0 through $prec {\r\n    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));\r\n  }\r\n\r\n  @return $x;\r\n}\r\n\r\n@function pow($base, $exponent, $prec: 12) {\r\n  // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation\r\n  @if (floor($exponent) != $exponent) {\r\n    $prec2: pow(10, $prec);\r\n    $exponent: round($exponent * $prec2);\r\n    $denominator: gcd($exponent, $prec2);\r\n    @return nth-root(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);\r\n  }\r\n\r\n  $value: $base;\r\n  @if $exponent > 1 {\r\n    @for $i from 2 through $exponent {\r\n      $value: $value * $base;\r\n    }\r\n  } @else if $exponent < 1 {\r\n    @for $i from 0 through -$exponent {\r\n      $value: $value / $base;\r\n    }\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n/*\r\n  Функция возвращающая факториал\r\n  @param {Number} $number - число\r\n  @return {Number} - число\r\n */\r\n@function fact($number) {\r\n  $value: 1;\r\n  @if $number > 0 {\r\n    @for $i from 1 through $number {\r\n      $value: $value * $i;\r\n    }\r\n  }\r\n  @return $value;\r\n}\r\n// Round a number to specified digits.\r\n//\r\n// @param  {Number} $number A number to round\r\n// @param  {Number} [$digits:0] Digits to output\r\n// @param  {String} [$mode:round] (round|ceil|floor) How to round a number\r\n// @return {Number} A rounded number\r\n// @example\r\n//     decimal-round(0.333)    => 0\r\n//     decimal-round(0.333, 1) => 0.3\r\n//     decimal-round(0.333, 2) => 0.33\r\n//     decimal-round(0.666)    => 1\r\n//     decimal-round(0.666, 1) => 0.7\r\n//     decimal-round(0.666, 2) => 0.67\r\n//\r\n@function decimal-round ($number, $digits: 0, $mode: round) {\r\n  $n: 1;\r\n  // $number must be a number\r\n  @if type-of($number) != number {\r\n    @warn '#{ $number } is not a number.';\r\n    @return $number;\r\n  }\r\n  // $digits must be a unitless number\r\n  @if type-of($digits) != number {\r\n    @warn '#{ $digits } is not a number.';\r\n    @return $number;\r\n  } @else if not unitless($digits) {\r\n    @warn '#{ $digits } has a unit.';\r\n    @return $number;\r\n  }\r\n  @for $i from 1 through $digits {\r\n    $n: $n * 10;\r\n  }\r\n  @if $mode == round {\r\n    @return round($number * $n) / $n;\r\n  } @else if $mode == ceil {\r\n    @return ceil($number * $n) / $n;\r\n  } @else if $mode == floor {\r\n    @return floor($number * $n) / $n;\r\n  } @else {\r\n    @warn '#{ $mode } is undefined keyword.';\r\n    @return $number;\r\n  }\r\n}\r\n// Ceil a number to specified digits.\r\n//\r\n// @param  {Number} $number A number to round\r\n// @param  {Number} [$digits:0] Digits to output\r\n// @return {Number} A ceiled number\r\n// @example\r\n//     decimal-ceil(0.333)    => 1\r\n//     decimal-ceil(0.333, 1) => 0.4\r\n//     decimal-ceil(0.333, 2) => 0.34\r\n//     decimal-ceil(0.666)    => 1\r\n//     decimal-ceil(0.666, 1) => 0.7\r\n//     decimal-ceil(0.666, 2) => 0.67\r\n//\r\n@function decimal-ceil ($number, $digits: 0) {\r\n  @return decimal-round($number, $digits, ceil);\r\n}\r\n\r\n// Floor a number to specified digits.\r\n//\r\n// @param  {Number} $number A number to round\r\n// @param  {Number} [$digits:0] Digits to output\r\n// @return {Number} A floored number\r\n// @example\r\n//     decimal-floor(0.333)    => 0\r\n//     decimal-floor(0.333, 1) => 0.3\r\n//     decimal-floor(0.333, 2) => 0.33\r\n//     decimal-floor(0.666)    => 0\r\n//     decimal-floor(0.666, 1) => 0.6\r\n//     decimal-floor(0.666, 2) => 0.66\r\n//\r\n@function decimal-floor ($number, $digits: 0) {\r\n  @return decimal-round($number, $digits, floor);\r\n}\r\n/*\r\n  Pi\r\n */\r\n@function pi() {\r\n  @return 3.14159265359;\r\n}\r\n\r\n/*\r\n  Функция вычсисления радианы\r\n  @param {Number} $angle - угол\r\n  @return {Number} - радиан\r\n */\r\n@function rad($angle) {\r\n  $unit: unit($angle);\r\n  $unitless: $angle / ($angle * 0 + 1);\r\n  // If the angle has 'deg' as unit, convert to radians.\r\n  @if $unit == deg {\r\n    $unitless: $unitless / 180 * pi();\r\n  }\r\n  @return $unitless;\r\n}\r\n\r\n/*\r\n  Функция возвразающая синус угла\r\n  @param {Number} $angle - угол\r\n  @return {Number} - синус угла\r\n */\r\n@function sin($angle) {\r\n  $sin: 0;\r\n  $angle: rad($angle);\r\n  // Iterate a bunch of times.\r\n  @for $i from 0 through 10 {\r\n    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);\r\n  }\r\n  @return $sin;\r\n}\r\n\r\n/*\r\n  Функция возвразающая косинус угла\r\n  @param {Number} $angle - угол\r\n  @return {Number} - синус угла\r\n */\r\n\r\n@function cos($angle) {\r\n  $cos: 0;\r\n  $angle: rad($angle);\r\n  // Iterate a bunch of times.\r\n  @for $i from 0 through 10 {\r\n    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);\r\n  }\r\n  @return $cos;\r\n}\r\n\r\n/// Function to generate long shadows (because flat is so has-been).\r\n/// Property-agnostic: works for both `box-shadow` and `text-shadow`.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @link https://unindented.org/articles/trigonometry-in-sass/ Pure Sass `cos` and `sin`\r\n///\r\n/// @param {Direction} $direction\r\n///     Shadow's direction (angle or keyword)\r\n/// @param {Length} $length\r\n///     Shadow's length\r\n/// @param {Color} $color\r\n///     Shadow's color\r\n/// @param {Bool | Color} $fade [false]\r\n///     Whether or not shadow should fade:\r\n///     - `false` means no fading, shadow is `$color`\r\n///     - `true`  means fading from `$color` to transparent\r\n///     - a color means fading from `$color` to `$fade`\r\n/// @param {Number} $shadow-count [100]\r\n///     Number of computed shadows\r\n///\r\n/// @return {List} - List of shadows\r\n///\r\n/// @require {function} Compass/helpers/math/cos\r\n///     http://compass-style.org/reference/compass/helpers/math/#cos\r\n/// @require {function} Compass/helpers/math/sin\r\n///     http://compass-style.org/reference/compass/helpers/math/#sin\r\n///\r\n/// @example scss - Usage\r\n/// .foo {\r\n///   text-shadow: long-shadow(42deg, 1em, #16a085);\r\n/// }\r\n/// .bar {\r\n///   box-shadow: long-shadow(to top left, 150px, hotpink, tomato);\r\n/// }\r\n@function long-shadow($direction, $length, $color, $fade: false, $shadow-count: 100) {\r\n  $shadows: ();\r\n  $conversion-map: (\r\n    to top: 180deg,\r\n    to top right: 135deg,\r\n    to right top: 135deg,\r\n    to right: 90deg,\r\n    to bottom right: 45deg,\r\n    to right bottom: 45deg,\r\n    to bottom: 0deg,\r\n    to bottom left: 315deg,\r\n    to left bottom: 315deg,\r\n    to left: 270deg,\r\n    to left top: 225deg,\r\n    to top left: 225deg\r\n  );\r\n\r\n  @if map-has-key($conversion-map, $direction) {\r\n    $direction: map-get($conversion-map, $direction);\r\n  }\r\n\r\n  @for $i from 1 through $shadow-count {\r\n    $current-step: ($i * $length / $shadow-count);\r\n    $current-color: if(not $fade, $color, if(type-of($fade) == 'color', mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));\r\n\r\n    $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');\r\n  }\r\n\r\n  @return $shadows;\r\n}\r\n\r\n/// Returns the opposite direction of each direction in a list\r\n/// @author Hugo Giraudel\r\n/// @param {List} $directions - List of initial directions\r\n/// @return {List} - List of opposite directions\r\n@function opposite-direction($directions) {\r\n  $opposite-directions: ();\r\n  $direction-map: (\r\n    'top': 'bottom',\r\n    'right': 'left',\r\n    'bottom': 'top',\r\n    'left': 'right',\r\n    'center': 'center',\r\n    'ltr': 'rtl',\r\n    'rtl': 'ltr'\r\n  );\r\n\r\n  @each $direction in $directions {\r\n    $direction: to-lower-case($direction);\r\n\r\n    @if map-has-key($direction-map, $direction) {\r\n      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));\r\n    } @else {\r\n      @warn \"No opposite direction can be found for `#{$direction}`. Direction omitted.\";\r\n    }\r\n  }\r\n\r\n  @return $opposite-directions;\r\n}\r\n\r\n@mixin addFont($fontName, $fontType: 'Regular', $fontWeight: 400, $fontStyle: 'normal') {\r\n  @font-face {\r\n    font-family: $fontName;\r\n    src: url('../../fonts/' + $fontName + '/' + $fontName + '-' + $fontType + '.woff2') format('woff2');\r\n    font-weight: $fontWeight;\r\n    font-style: $fontStyle;\r\n    font-display: swap;\r\n  }\r\n}\r\n\r\n@mixin fontFamily($font) {\r\n  font-family: $font, 'Arial', 'San Francisco', sans-serif;\r\n}"]}